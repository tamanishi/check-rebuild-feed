name: check feed

on:
  # schedule:
  #   - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  check-feed:
    runs-on: ubuntu-latest
    name: check, generate & commit
    steps:
      - uses: actions/checkout@v3
      - name: "check rss"
        id: "check"
        uses: tamanishi/check-rebuild-feed@v0.1
      - name: "update json"
        if: steps.check.outputs.result == 'updated'
        run: |
          curl -v -H "Authorization: token ${{ secrets.GH_PRIVATE_ACCESS_TOKEN }}" -H "Accept: application/vnd.github.everest-preview+json" "https://api.github.com/repos/tamanishi/rebuild_feed_to_json_go/dispatches" -d '{"event_type": "update-episodes"}'
      - name: "update d1"
        if: steps.check.outputs.result == 'updated'
        run: |
          curl -v https://rebuild-shownotes.tamanishi.workers.dev
      - name: download custom sling cli
        # if: steps.check.outputs.result == 'updated'
        run: |
          curl -L -o sling https://sling-cli.tamanishi.net/sling
          chmod +x sling
          sudo mv sling /usr/local/bin/
      - name: export D1 to parquet using sling
        # if: steps.check.outputs.result == 'updated'
        env:
            D1_CONNECTION: ${{ secrets.D1_CONNECTION }}
            D1_TABLES: "Episodes Shownotes"
        run: |
          for table in $D1_TABLES
          do
            echo "Exporting table: $table"
            sling run --src-conn "$D1_CONNECTION" --src-stream "$table" --tgt-object "file://${table}.parquet" --debug
          done
      - name: "commit rss, parquet"
        # if: steps.check.outputs.result == 'updated'
        run: |
          git add ./rss.xml
          git add ./Episodes.parquet
          git add ./Shownotes.parquet
          git config user.name "Masayuki Sunahara"
          git config user.email tamanishi@gmail.com
          git commit -m "update episodes"
          # git push origin main
      - name: notify success
        if: ${{ success() && steps.check.outputs.result == 'updated' }}
        run: |
          curl -X POST -H "Content-Type: application/json" -H 'Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}' -d '{ "to": "${{ secrets.LINE_USER_ID }}", "messages":[{ "type":"text", "text":"${{ github.repository }} succeeded" }]}' https://api.line.me/v2/bot/message/push
      - name: notify fail
        if: ${{ failure() }}
        run: |
          curl -X POST -H "Content-Type: application/json" -H 'Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}' -d '{ "to": "${{ secrets.LINE_USER_ID }}", "messages":[{ "type":"text", "text":"${{ github.repository }} failed" }]}' https://api.line.me/v2/bot/message/push
